/**
 * GPII PCP Render Handler
 *
 * Copyright 2014 Astea
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("kettle.requests.request.handler.pcpRender", {
        gradeNames: ["gpii.request.flowManager.sessionAware", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.pcpRenderHandle",
                args: ["{request}.socket"],
                dynamic: true
            }
        }
    });

    gpii.request.flowManager.pcpRenderHandle = function (socket) {
        //  this paylod of settings will be eventually received from the MM

        var payload = {
            preferences: {
                "http://registry.gpii.org/common/fontSize": [{
                    "value": 21
                }],
                "http://registry.gpii.org/common/cursorSize": [{
                    "value": 0.8400000000000001
                }],
                "http://registry.gpii.org/common/highContrastEnabled": [{
                    "value": true
                }],
            },
            messages: [{
                type: "infoMessage",
                message: {
                    dk: "Dette er en besked til brugeren",
                    en: "Howdy user! This comes from the FlowManager.",
                    es: "Â¿Hola Pedro, donde esta la biblioteca?"
                }
            }, {
                type: "infoMessage",
                message: {
                    en: "Now I'm gonna give you a help message with a link."
                }
            }, {
                type: "helpMessage",
                message: {
                    en: {
                        message: "This is a help message. Another coming in 10 seconds!",
                        learnMore: "http://www.cloud4all.info/"
                    }
                }
            }]
        };

        var payload2 = {
            messages: [{
                type: "helpMessage",
                message: {
                    en: {
                        message: "Here's the second help message. These can come at random times.",
                        learnMore: "http://www.google.com"
                    }
                }
            }]
        }

        socket.emit("message", payload);
        setTimeout(function () {
            socket.emit("message", payload2);
        }, 30000);

    };

})();
